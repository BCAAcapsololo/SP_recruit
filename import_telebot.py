from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from telegram.constants import ParseMode
import datetime
import os
import json
from dotenv import load_dotenv

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
VACANCY_FILE = os.path.join(BASE_DIR, "vacancies.json")

# üîß –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
WITH_IMAGES = False

# Telegram ID –¥–ª—è –∑–∞—è–≤–æ–∫
ADMIN_ID = -1002865584189

# üîß ID —Ç–µ–º
THREAD_IDS = {
    "#solo": 47,
    "#cp": 45,
    "#recruit": 51,
    "#vacancy": 66,       # —Ç–µ–º–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
    "#join_vacancy": 73   # —Ç–µ–º–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ö–ü
}

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
ALLOWED_IDS = [394324214, 657316611, 293183798, 5310199168, 580709477, 1317317174, 269650718, 1749349659, 1264264185, 140066716, 626603698, 519580140, 1452497431, 339954863, 368411580, 399010961, 5004309519, 1599041162, 1111303399, 1186568080]

# –í–æ–ø—Ä–æ—Å—ã
SOLO_QUESTIONS = [
    {"question": "–í–∞—à–µ –∏–º—è?", "image": "1.jpg"},
    {"question": "–í–æ–∑—Ä–∞—Å—Ç?", "image": "1.jpg"},
    {"question": "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫?", "image": "1.jpg"},
    {"question": "–ö–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∏–≥—Ä–∞—Ç—å?", "image": "1.jpg"},
    {"question": "–í—Ä–µ–º—è –∏–≥—Ä—ã (–ø—Ä–∞–π–º)?", "image": "1.jpg"},
    {"question": "–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è? (–∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–≥)", "image": "1.jpg"}
]

RECRUIT_QUESTIONS = [
    {"question": "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã? (–º–∏–ª–∏, –ª—É–∫–∏, –º–∞–≥–∏...)", "image": "1.jpg"},
    {"question": "–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∏—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–π –≥—Ä—É–ø–ø—ã?", "image": "1.jpg"},
    {"question": "–ü—Ä–∞–π–º –≥—Ä—É–ø–ø—ã? (–≤—Ä–µ–º—è –ø–æ –ú—Å–∫)", "image": "1.jpg"},
    {"question": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ü–õ–∞?", "image": "1.jpg"}
]

CP_QUESTIONS = [
    {"question": "–í–∞—à–µ –∏–º—è?", "image": "1.jpg"},
    {"question": "–í–æ–∑—Ä–∞—Å—Ç?", "image": "1.jpg"},
    {"question": "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫?", "image": "1.jpg"},
    {"question": "–ö–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∏–≥—Ä–∞—Ç—å?", "image": "1.jpg"},
    {"question": "–í—Ä–µ–º—è –∏–≥—Ä—ã (–ø—Ä–∞–π–º)?", "image": "1.jpg"},
    {"question": "–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è? (–∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–≥)", "image": "1.jpg"}
]

VACANCY_QUESTIONS = [
    {"question": "–ù–∞–∑–≤–∞–Ω–∏–µ –ö–ü", "image": "1.jpg"},
    {"question": "–ü—Ä–∞–π–º –ø–æ –ú—Å–∫", "image": "1.jpg"},
    {"question": "–ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏—â–µ—Ç–µ?", "image": "1.jpg"},
    {"question": "–î–æ–ø. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "image": "1.jpg"},
    {"question": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–ü –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ", "image": "1.jpg"},
    {"question": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ü–õ–∞", "image": "1.jpg"}
]

JOIN_VACANCY_QUESTIONS = [
    {"question": "–í–∞—à–µ –∏–º—è?", "image": "1.jpg"},
    {"question": "–í–æ–∑—Ä–∞—Å—Ç?", "image": "1.jpg"},
    {"question": "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫?", "image": "1.jpg"},
    {"question": "–ö–ª–∞—Å—Å/—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å?", "image": "1.jpg"},
    {"question": "–í—Ä–µ–º—è –∏–≥—Ä—ã (–ø—Ä–∞–π–º)?", "image": "1.jpg"},
    {"question": "–ö–æ–Ω—Ç–∞–∫—Ç—ã (–∫–æ–Ω—Ç–∞–∫—Ç –≤ –¢–ì)?", "image": "1.jpg"}
]

# –≠—Ç–∞–ø—ã
SELECT_TYPE, ASKING, CONFIRM = range(3)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
last_submission_time = {}

# ===== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ =====
def load_vacancies():
    if not os.path.exists(VACANCY_FILE):
        return []
    with open(VACANCY_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

def save_vacancy(vacancy):
    vacancies = load_vacancies()
    vacancies.append(vacancy)
    with open(VACANCY_FILE, "w", encoding="utf-8") as f:
        json.dump(vacancies, f, ensure_ascii=False, indent=2)

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("–Ø —Å–æ–ª–æ –∏–≥—Ä–æ–∫", callback_data='#solo')],
        [InlineKeyboardButton("–Ø –∏—â—É –ö–ü", callback_data='#cp')],
        [InlineKeyboardButton("–ú–´ (–ö–ü) –∏—â–µ–º –∫–ª–∞–Ω", callback_data='#recruit')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é (–∫–Ω–æ–ø–∫–∞ –¥–ª—è —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞)", callback_data='#vacancy')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data='#show_vacancies')]
    ]

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_TYPE

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    form_type = query.data

    # –ü–æ–∫–∞–∑ –≤–∞–∫–∞–Ω—Å–∏–π
    if form_type == '#show_vacancies':
        vacancies = load_vacancies()
        if not vacancies:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
            return ConversationHandler.END

        await query.edit_message_text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

        text_lines = ["üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:"]
        keyboard = []
        for v in vacancies:
            name = v.get("name")
            prime = v.get("prime")
            looking = v.get("looking")
            requirements = v.get("requirements")
            info = v.get("info")
            
            if not name:
                continue

            vacancy_text = (
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"‚û°Ô∏è <b>{name}</b>\n"
                f"üïí –ü—Ä–∞–π–º: {prime}\n"
                f"üéØ –ò—â–µ–º: {looking}\n"
                f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}\n"
                f"‚ÑπÔ∏è –û –ö–ü: {info}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–•–æ—á—É –≤ {name}", callback_data=f"joinvac_{name}")]
            ])

            await query.message.reply_text(
                vacancy_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

        return SELECT_TYPE

    # –î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏
    if form_type == '#vacancy' and user_id not in ALLOWED_IDS:
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∫–ª–∞–Ω–∞ Svetlana Petrovna")
        return ConversationHandler.END

    # –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
    if form_type.startswith("joinvac_"):
        context.user_data['form_type'] = '#join_vacancy'
        context.user_data['vacancy_name'] = form_type.replace("joinvac_", "")
        context.user_data['answers'] = []
        context.user_data['current_q'] = 0
        context.user_data['questions'] = JOIN_VACANCY_QUESTIONS

        q = JOIN_VACANCY_QUESTIONS[0]['question']
        await query.message.reply_text(
            f"–í—ã –ø–æ–¥–∞—ë—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ö–ü <b>{context.user_data['vacancy_name']}</b>\n\n{q}",
            parse_mode=ParseMode.HTML
        )
        return ASKING

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π)
    if form_type != '#vacancy':
        last_time = last_submission_time.get(user_id)
        if last_time and (datetime.datetime.now() - last_time).seconds < 3600:
            await query.edit_message_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π.")
            return ConversationHandler.END

    # –°–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
    context.user_data['form_type'] = form_type
    context.user_data['answers'] = []
    context.user_data['current_q'] = 0

    if form_type == '#recruit':
        questions = RECRUIT_QUESTIONS
    elif form_type == '#cp':
        questions = CP_QUESTIONS
    elif form_type == '#vacancy':
        questions = VACANCY_QUESTIONS
    else:
        questions = SOLO_QUESTIONS

    context.user_data['questions'] = questions
    await query.message.reply_text(questions[0]['question'])
    return ASKING

# ===== –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ =====
async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data['answers'].append(text)
    context.user_data['current_q'] += 1

    questions = context.user_data['questions']
    if context.user_data['current_q'] < len(questions):
        await update.message.reply_text(questions[context.user_data['current_q']]['question'])
        return ASKING
    else:
        form_type = context.user_data['form_type']
        answers = context.user_data['answers']
        preview_text = f"üìù –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ({form_type}):\n\n"
        for q, a in zip(questions, answers):
            preview_text += f"<b>{q['question']}</b> {a}\n"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_submit")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_form")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∞–Ω–∫–µ—Ç—ã", callback_data="#change")]
        ])
        await update.message.reply_text(preview_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        return CONFIRM

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ =====
async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    form_type = context.user_data['form_type']
    answers = context.user_data['answers']
    questions = context.user_data['questions']

    if query.data == "confirm_submit":
        text = f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({form_type}):\n\n"
        for q, a in zip(questions, answers):
            text += f"<b>{q['question']}</b> {a}\n"

        # –µ—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if form_type == '#vacancy':
            vacancy = {
                "name": answers[0],
                "prime": answers[1],
                "looking": answers[2],
                "requirements": answers[3],
                "info": answers[4],
                "recruiter": answers[5]
            }
            save_vacancy(vacancy)

        # –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
        if form_type == '#join_vacancy':
            vacancy_name = context.user_data.get("vacancy_name")
            recruiter = None
            vacancies = load_vacancies()
            for v in vacancies:
                if v.get("name") == vacancy_name:
                    recruiter = v.get("recruiter")
                    break
            text += f"\n\nüë§ –†–µ–∫—Ä—É—Ç–µ—Ä –ö–ü <b>{vacancy_name}</b>: {recruiter or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"

        # –æ—Ç–ø—Ä–∞–≤–∫–∞
        thread_id = THREAD_IDS.get(form_type)
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=text,
            parse_mode=ParseMode.HTML,
            message_thread_id=thread_id
        )
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
        last_submission_time[user_id] = datetime.datetime.now()
        return ConversationHandler.END

    elif query.data == "edit_form":
        context.user_data['answers'] = []
        context.user_data['current_q'] = 0
        await query.edit_message_text(f"–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n\n{questions[0]['question']}")
        return ASKING

# ===== –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await update.message.reply_text(f"Chat ID —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏: <code>{chat_id}</code>", parse_mode=ParseMode.HTML)

# ===== –ó–∞–ø—É—Å–∫ =====
def main():
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_TYPE: [
                CallbackQueryHandler(button_handler),
                CommandHandler('start', start)
            ],
            ASKING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers),
                CommandHandler('start', start),
                CallbackQueryHandler(button_handler)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_handler, pattern="^confirm_submit$"),
                CallbackQueryHandler(confirm_handler, pattern="^edit_form$"),
                CallbackQueryHandler(button_handler)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("getchatid", get_chat_id))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
