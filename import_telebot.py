from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from telegram.constants import ParseMode
import datetime
import os
BASE_DIR = r"C:\Users\BCAAcaps\Desktop\SP bot"
from dotenv import load_dotenv

# Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
ADMIN_ID = -1002865584189  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –í–æ–ø—Ä–æ—Å—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
SOLO_QUESTIONS = [
    {"question": "–í–∞—à–µ –∏–º—è?", "image": "1.jpg"},
    {"question": "–í–æ–∑—Ä–∞—Å—Ç?", "image": "1.jpg"},
    {"question": "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫?", "image": "1.jpg"},
    {"question": "–ò–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å?", "image": "1.jpg"},
    {"question": "–£—Ä–æ–≤–µ–Ω—å –º–µ–π–Ω–∞?", "image": "1.jpg"},
    {"question": "–£—Ä–æ–≤–µ–Ω—å —Å–∞–±–æ–≤?", "image": "1.jpg"},
    {"question": "–í—Ä–µ–º—è –∏–≥—Ä—ã (–ø—Ä–∞–π–º)?", "image": "1.jpg"}
]

RECRUIT_QUESTIONS = [
    {"question": "–¢–∏–ø –≥—Ä—É–ø–ø—ã? –ö –ø—Ä–∏–º–µ—Ä—É: –º–∏–ª–∏, –ª—É–∫–∏, –º–∞–≥–∏, —Å—Ç–æ–ø-–ø–∞–∫", "image": "1.jpg1.jpg"},
    {"question": "–ö–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã –∏—â–µ–º? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–æ—Ñ—ã", "image": "1.jpg"},
    {"question": "–ü—Ä–∞–π–º –≥—Ä—É–ø–ø—ã? –í—Ä–µ–º—è –ø–æ –ú—Å–∫", "image": "1.jpg"},
    {"question": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ü–õ–∞?", "image": "1.jpg"}
]

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
SELECT_TYPE, ASKING, CONFIRM = range(3)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
last_submission_time = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()

    keyboard = [
        [InlineKeyboardButton("–Ø —Å–æ–ª–æ –∏–≥—Ä–æ–∫", callback_data='#solo')],
        [InlineKeyboardButton("–Ø –∏—â—É –ö–ü", callback_data='#cp')],
        [InlineKeyboardButton("–ú–´ (–ö–ü) –∏—â–µ–º –∏–≥—Ä–æ–∫–æ–≤", callback_data='#recruit')]
    ]

    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    return SELECT_TYPE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    last_time = last_submission_time.get(user_id)
    if last_time and (datetime.datetime.now() - last_time).seconds < 35:
        await query.edit_message_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π.")
        return ConversationHandler.END

    context.user_data['form_type'] = query.data
    context.user_data['answers'] = []
    context.user_data['current_q'] = 0

    if query.data == '#recruit':
        questions = RECRUIT_QUESTIONS
    else:
        questions = SOLO_QUESTIONS

    context.user_data['questions'] = questions
    question = questions[0]['question']
    image_path = questions[0]['image']
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–µ—Ä–µ–¥ –≤–æ–ø—Ä–æ—Å–æ–º
    await query.edit_message_text(question)
    await query.message.reply_photo(photo=open(image_path, 'rb'))  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return ASKING

# –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data['answers'].append(text)
    context.user_data['current_q'] += 1

    questions = context.user_data['questions']
    if context.user_data['current_q'] < len(questions):
        next_q = questions[context.user_data['current_q']]['question']
        image_path = questions[context.user_data['current_q']]['image']
        await update.message.reply_text(next_q)
        await update.message.reply_photo(photo=open(image_path, 'rb'))  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return ASKING
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        form_type = context.user_data['form_type']
        answers = context.user_data['answers']

        fields = RECRUIT_QUESTIONS if form_type == 'recruit' else SOLO_QUESTIONS

        preview_text = f"üìù –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ({form_type}):\n\n"
        for q, a in zip(fields, answers):
            preview_text += f"*{q['question']}* {a}\n"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_submit")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_form")]
        ])

        await update.message.reply_text(preview_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    form_type = context.user_data['form_type']
    answers = context.user_data['answers']
    questions = context.user_data['questions']

    if query.data == "confirm_submit":
        text = f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({form_type}):\n\n"
        for q, a in zip(questions, answers):
            text += f"*{q['question']}* {a}\n"

        await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.MARKDOWN)
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
        last_submission_time[user_id] = datetime.datetime.now()
        return ConversationHandler.END

    elif query.data == "edit_form":
        context.user_data['answers'] = []
        context.user_data['current_q'] = 0
        await query.edit_message_text(f"–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n\n{questions[0]['question']}")
        return ASKING

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /getchatid
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await update.message.reply_text(f"Chat ID —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏: `{chat_id}`", parse_mode=ParseMode.MARKDOWN)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_TYPE: [
                CallbackQueryHandler(button_handler),
                CommandHandler('start', start)
            ],
            ASKING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers),
                CommandHandler('start', start)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_handler, pattern="^confirm_submit$"),
                CallbackQueryHandler(confirm_handler, pattern="^edit_form$")
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("getchatid", get_chat_id))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
